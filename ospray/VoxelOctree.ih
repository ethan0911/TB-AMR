/*************************
 * ISPC version of voxel octree
 * Author: Feng 
 * Date: 4-2-2019
 *************************/

#pragma once

//#include "common/Ray.ih"
//#include "transferFunction/TransferFunction.ih"
#include "math/vec.ih"
#include "math/box.ih"
#include "math/AffineSpace.ih"

struct VoxelOctreeNode
{
    /* data */
    unsigned int8 isLeaf;
    unsigned int64 childDescripteOrValue;
};



static const uniform unsigned int CHILD_BIT_COUNT[] = {
  0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
  1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
};


inline varying unsigned int8 getChildMask(const varying VoxelOctreeNode & node)
{
    return node.childDescripteOrValue & 0xFF;
}

inline uniform unsigned int8 getChildMask(const uniform VoxelOctreeNode & node)
{
    return node.childDescripteOrValue & 0xFF;
}

inline varying unsigned int64 getChildOffset(const varying VoxelOctreeNode & node)
{
    return node.childDescripteOrValue >> 8;
}

inline uniform unsigned int64 getChildOffset(const uniform VoxelOctreeNode & node)
{
    return node.childDescripteOrValue >> 8;
}

inline varying double getValue(const varying VoxelOctreeNode & node)
{
  double *uniform value = (double *uniform)&node.childDescripteOrValue;
  return *value;
}

inline uniform double getValue(const uniform VoxelOctreeNode & node)
{  
  uniform double *uniform value = (double *uniform)&node.childDescripteOrValue;
  return *value;
}

inline uniform unsigned int getChildNum(const uniform VoxelOctreeNode & node)
{
  return CHILD_BIT_COUNT[getChildMask(node)];
}

inline bool isLeaf(const VoxelOctreeNode & node)
{
  return node.isLeaf == 1;
}



struct VoxelOctree
{
    uniform box3f _bounds;
    uniform box3f _virtualBounds;

    uniform VoxelOctreeNode* uniform _octreeNodes;
    uniform unsigned int64 _oNodeNum;
};
