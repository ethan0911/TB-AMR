#include "ospray/math/box.ih"
#include "ospray/math/vec.ih"
#include "ospray/volume/Volume.ih"

#include "volume/Volume.ih"
#include "VoxelOctree.ih"

inline bool box_contains(const uniform box3f &b1, const varying box3f &b2)
{
  vec3f lo = b2.lower;
  vec3f hi = b2.upper;
  const varying vec3f conners[8] = {
      make_vec3f(lo.x, lo.y, lo.z),
      make_vec3f(hi.x, lo.y, lo.z),
      make_vec3f(lo.x, hi.y, lo.z),
      make_vec3f(hi.x, hi.y, lo.z),
      make_vec3f(lo.x, lo.y, hi.z),
      make_vec3f(hi.x, lo.y, hi.z),
      make_vec3f(lo.x, hi.y, hi.z),
      make_vec3f(hi.x, hi.y, hi.z)};

  return box_contains(b1, conners[0]) && box_contains(b1, conners[1]) &&
         box_contains(b1, conners[2]) && box_contains(b1, conners[3]) &&
         box_contains(b1, conners[4]) && box_contains(b1, conners[5]) &&
         box_contains(b1, conners[6]) && box_contains(b1, conners[7]);
}

inline float max(float a, float b, float c)
{
  return max(max(a,b),c);
}

inline float min(float a, float b, float c)
{
   return min(min(a,b),c);
}

inline float max(float a, float b, float c, float d,
                 float e, float f, float g, float h)
{
  return max(max(max(a,b),max(c,d)),max(max(e,f),max(g,h)));
}

inline float min(float a, float b, float c, float d,
                 float e, float f, float g, float h)
{
  return min(min(min(a,b),min(c,d)),min(min(e,f),min(g,h)));
}


// Our ISPC side version of the struct, with pointers back into data
// shared with the C++ side

struct TAMRVolume {
  // The "parent" class
  Volume super;

  // void *uniform p4estTree;
  // Note: ISPC only supports 32-bit addressing, so if we are above
  // this number of bytes (highly likely for large data!) we'll need
  // to do the two-phase thing Ingo describes in
  // https://ingowald.blog/2018/06/13/ispc-bag-of-tricks-part-1-addressing/
  // which is used throughout OSPRay as well
  // uniform uint64 p4estTreeBytes;

  //SCALAR SAMPLING
  //! pointer to the c++-side object (since we do everything scalar for now)
  void *cppObject;
  //! pointer to a c++-side sampler object (maintained on cpp side
  void *cppSampler;

  //! Grid dimension.
  uniform vec3i dimensions;
  //! Grid origin.
  uniform vec3f gridOrigin;
  //! Grid spacing in each dimension in world coordinate.
  uniform vec3f gridWorldSpace; 
  //! Grid origin in worldspace.
  uniform vec3f worldOrigin;
  //! # of samples to take per octree cell
  uniform int samplesPerCell;
  uniform float opacityScaleFactor;

  uniform VoxelOctree _voxelAccel; 

    //! Transform from local coordinates to world coordinates using the volume's grid definition.
  void (*uniform transformLocalToWorld)(const TAMRVolume *uniform volume,
                                        const varying vec3f &localCoord,
                                        varying vec3f &worldCoord);

  //! Transform from world coordinates to local coordinates using the volume's grid definition.
  void (*uniform transformWorldToLocal)(const TAMRVolume *uniform volume,
                                        const varying vec3f &worldCoord,
                                        varying vec3f &localCoord);

};


