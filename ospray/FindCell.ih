#include "VoxelOctree.ih"


/*! a reference to a given cell on a given level; this is what a 'node location' kernel will return */
struct CellRef
{
  //! lower left front position, in unit grid space
  vec3f pos;
  //! width of cell, also doubles as level indicator
  float width;
  //! value at this cell
  //! Reconsideration: A cell don't have value if the value is specified to 0;
  float value;  
};


struct VOStack
{
  varying bool active;
  varying unsigned int64 pNodeIdx;
  varying vec3f pos;
  uniform float width;
};


inline vec3f centerOf(const CellRef &cr)
{
  return cr.pos + make_vec3f(0.5f*cr.width);
}



inline uniform VOStack* uniform pushStack(uniform VOStack* uniform stackPtr,
                                          varying unsigned int64 pNodeIdx,
                                          varying vec3f pos,
                                          uniform float width)
{
  unmasked{
    stackPtr->active = false;
    stackPtr->pNodeIdx = pNodeIdx;
    stackPtr->pos = pos;
  } 

  stackPtr->active = true;
  stackPtr->width = width;

  return stackPtr + 1;
}


inline bool isCoarser(const float width, const CellRef &C)
{
  return width > C.width;
}

inline varying CellRef findLeafCell(const uniform VoxelOctree &_voxelAccel,
                            const varying vec3f &_localCoord)
{
  vec3f gridOrigin = _voxelAccel._virtualBounds.lower;
  uniform vec3f boundSize = box_size(_voxelAccel._virtualBounds);
  uniform float width = boundSize.x;

  const vec3f localCoord =
      clamp(_localCoord, make_vec3f(0.f), _voxelAccel._actualBounds.upper- make_vec3f(0.000001f));


  uniform VOStack stack[128];
  uniform VOStack *uniform stackPtr = pushStack(&stack[0],0,gridOrigin,width);

  while(stackPtr > stack){
    --stackPtr;
    if(stackPtr->active){
      const unsigned int64 nodeID = stackPtr->pNodeIdx;
      const vec3f pos = stackPtr->pos;
      const uniform float cellWidth = stackPtr->width;

      if(nodeID >= _voxelAccel._oNodeNum)
      {
        CellRef ret = {pos,cellWidth,-1.0};
        return ret;
      }

      const uniform VoxelOctreeNode* pNode = getOctreeNode(_voxelAccel,nodeID);
      // const VoxelOctreeNode node = _voxelAccel._octreeNodes[nodeID];

      if(isLeaf(pNode)){
        CellRef ret = {pos,cellWidth,(float)getValue(pNode)};
        return ret;
      }else{        
        vec3f center= pos + make_vec3f(cellWidth * 0.5f);
        unsigned int8 octantMask =0;
        if(localCoord.x >= center.x) octantMask |= 1;
        if(localCoord.y >= center.y) octantMask |= 2;
        if(localCoord.z >= center.z) octantMask |= 4;

        unsigned int8 childMask = getChildMask(pNode);
        unsigned int64 childOffset = getChildOffset(pNode);

        bool hasChild = childMask & (1 << octantMask);
        // no leaf(no voxel), return invalid value 0.0. 
        if(!hasChild)
        {
          CellRef ret = {pos,cellWidth * 0.5,0.0};
          return ret;
        }

        unsigned int8 rightSibling = (1 << octantMask) - 1;

        unsigned int8 childIndex = BIT_COUNT[childMask & rightSibling];

        unsigned int64 childNodeID = nodeID + childOffset + childIndex;

        vec3f lowerPos = pos + make_vec3f((octantMask & 1) ? cellWidth * 0.5 : 0.0,
                                          (octantMask & 2) ? cellWidth * 0.5 : 0.0,
                                          (octantMask & 4) ? cellWidth * 0.5 : 0.0);
        stackPtr = pushStack(stackPtr,childNodeID,lowerPos,cellWidth * 0.5f);
      }
    }
  }
  CellRef ret = {gridOrigin,width,-3.0};
  return ret;
}


inline bool isOverlapIsoValue(const uniform VoxelOctree &_voxelAccel,
                              const unsigned int64 &nodeID,
                              const varying box3f &bbox,
                              const varying box3f &queryBox,
                              const uniform float cellValue,
                              const uniform float isoValue)
{

  bool isIsoOverlap = false;
  if (!overlapping(bbox, queryBox))
    return false;

  const uniform VoxelOctreeNode *pNode = getOctreeNode(_voxelAccel, nodeID);

  float halfBoxWidth     = 0.5 * (bbox.upper.x - bbox.lower.x);
  range1f rg             = pNode->vRange;

  if (isLeaf(pNode) || !contains(rg, isoValue)) {
    // if current node is leaf or is inner node but its value
    // range don't overlap the isoValue, check if current node's value and
    // query cell's value cover the isoValue.
    extend(rg, cellValue);
    isIsoOverlap = contains(rg, isoValue);
    return isIsoOverlap;
  } else {
    unsigned int8 childMask    = getChildMask(pNode);
    unsigned int64 childOffset = getChildOffset(pNode);
    int childNum               = BIT_COUNT[childMask];

    for (unsigned int8 i = 0; i < 8; i++) {
      bool isIthChildMaskSet = childMask & (1 << i);
      if (isIthChildMaskSet) {
        vec3f lower = bbox.lower + make_vec3f((i & 1) ? halfBoxWidth : 0.0,
                                              (i & 2) ? halfBoxWidth : 0.0,
                                              (i & 4) ? halfBoxWidth : 0.0);
        const box3f childBbox =
            make_box3f(lower, lower + make_vec3f(halfBoxWidth));

        unsigned int8 rightSibling = (1 << i) - 1;
        unsigned int8 childIndex   = BIT_COUNT[childMask & rightSibling];

        unsigned int64 childNodeID = nodeID + childOffset + childIndex;
        // PRINT(childNodeID);
        const uniform VoxelOctreeNode *childNode =
            getOctreeNode(_voxelAccel, childNodeID);

        bool childIsoOverlap = isOverlapIsoValue(
            _voxelAccel, childNodeID, childBbox, queryBox, cellValue, isoValue);

        isIsoOverlap = isIsoOverlap || childIsoOverlap;
      }

      // if one child's value overlap the isovalue, return true
      if(isIsoOverlap)
        return isIsoOverlap;
    }
  }
  return isIsoOverlap;
}

inline bool isPotentialOverlapVoxel(const uniform VoxelOctree &_voxelAccel,
                                    const varying box3f &queryBox,
                                    const uniform float cellValue,
                                    const uniform float isoValue)
{
  bool isIsoOverlap = false;

  uniform vec3f boundSize = box_size(_voxelAccel._virtualBounds);
  uniform float width = boundSize.x;
  uniform VOStack stack[128];
  uniform VOStack *uniform stackPtr =
      pushStack(&stack[0], 0, _voxelAccel._virtualBounds.lower, width);

  while (stackPtr > stack) {
    --stackPtr;
    if (stackPtr->active) {
      const unsigned int64 nodeID   = stackPtr->pNodeIdx;
      const vec3f pos               = stackPtr->pos;
      const uniform float cellWidth = stackPtr->width;

      box3f bbox = make_box3f(pos, pos + make_vec3f(cellWidth));   

      const uniform VoxelOctreeNode *pNode = getOctreeNode(_voxelAccel, nodeID);
      float halfBoxWidth                   = 0.5 * cellWidth;
      range1f rg                           = pNode->vRange;
      if (isLeaf(pNode) || !contains(rg, isoValue)) {
        // if current node is leaf or is inner node but its value
        // range don't overlap the isoValue, check if current node's value and
        // query cell's value cover the isoValue.
        extend(rg, cellValue);
        isIsoOverlap = contains(rg, isoValue);

        if(isIsoOverlap)
          return isIsoOverlap;
      } else {
        unsigned int8 childMask    = getChildMask(pNode);
        unsigned int64 childOffset = getChildOffset(pNode);
        int childNum               = BIT_COUNT[childMask];

        for (unsigned int8 i = 0; i < 8; i++) {
          bool isIthChildMaskSet = childMask & (1 << i);
          if (isIthChildMaskSet) {
            vec3f lower = bbox.lower + make_vec3f((i & 1) ? halfBoxWidth : 0.0,
                                                  (i & 2) ? halfBoxWidth : 0.0,
                                                  (i & 4) ? halfBoxWidth : 0.0);
            const box3f childBbox =
                make_box3f(lower, lower + make_vec3f(halfBoxWidth));

            if (overlapping(childBbox, queryBox)) {
              unsigned int8 rightSibling = (1 << i) - 1;
              unsigned int8 childIndex   = BIT_COUNT[childMask & rightSibling];

              unsigned int64 childNodeID = nodeID + childOffset + childIndex;
              stackPtr =
                  pushStack(stackPtr, childNodeID, lower, cellWidth * 0.5f);
            }
          }
        }
      }
    }
  }
  return isIsoOverlap;
}
