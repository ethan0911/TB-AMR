#include "volume/Volume.ih"
#include "VoxelOctree.ih"



// Our ISPC side version of the struct, with pointers back into data
// shared with the C++ side

struct P4estVolume {
  // The "parent" class
  Volume super;

  void *uniform p4estTree;
  // Note: ISPC only supports 32-bit addressing, so if we are above
  // this number of bytes (highly likely for large data!) we'll need
  // to do the two-phase thing Ingo describes in
  // https://ingowald.blog/2018/06/13/ispc-bag-of-tricks-part-1-addressing/
  // which is used throughout OSPRay as well
  uniform uint64 p4estTreeBytes;

  //SCALAR SAMPLING
  //! pointer to the c++-side object (since we do everything scalar for now)
  void *cppObject;
  //! pointer to a c++-side sampler object (maintained on cpp side
  void *cppSampler;


  //! Grid dimension.
  uniform vec3i dimensions;
  //! Grid origin.
  uniform vec3f gridOrigin;
  //! Grid spacing in each dimension.
  uniform vec3f gridSpacing; 

  uniform VoxelOctree _voxelAccel; 

    //! Transform from local coordinates to world coordinates using the volume's grid definition.
  void (*uniform transformLocalToWorld)(const P4estVolume *uniform volume,
                                        const varying vec3f &localCoord,
                                        varying vec3f &worldCoord);

  //! Transform from world coordinates to local coordinates using the volume's grid definition.
  void (*uniform transformWorldToLocal)(const P4estVolume *uniform volume,
                                        const varying vec3f &worldCoord,
                                        varying vec3f &localCoord);
};

